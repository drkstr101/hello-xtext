/*
 * generated by Xtext 2.21.0
 */
package drkstr.hello.xtext.natural.core.validation;

import static drkstr.hello.xtext.natural.core.validation.IssueCodes.MISSING_SCENARIO_STEPS;
import static drkstr.hello.xtext.natural.core.validation.IssueCodes.MISSING_SCENARIO_TITLE;
import static drkstr.hello.xtext.natural.core.validation.IssueCodes.MISSING_STEPDEF;
import static drkstr.hello.xtext.natural.core.validation.IssueCodes.MULTIPLE_STEPDEF;
import static drkstr.hello.xtext.natural.core.natural.NaturalPackage.Literals.SCENARIO__STEPS;
import static drkstr.hello.xtext.natural.core.natural.NaturalPackage.Literals.SCENARIO__TITLE;
import static drkstr.hello.xtext.natural.core.natural.NaturalPackage.Literals.STEP__DESCRIPTION;

import java.util.List;

import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;

import com.google.inject.Inject;

import drkstr.hello.xtext.natural.core.natural.Scenario;
import drkstr.hello.xtext.natural.core.natural.Step;
import drkstr.hello.xtext.natural.stepmatcher.IStepMatcher;
import drkstr.hello.xtext.natural.stepmatcher.StepdefMatch;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class NaturalValidator extends AbstractNaturalValidator {

	@Inject
	private IStepMatcher stepMatcher;
	
//	@Check
//	public void missingScenarios(Model model) {
//		if (model.getScenarios().isEmpty()) {
//			error(MISSING_SCENARIOS.message(), model, MODEL__SCENARIOS, MISSING_SCENARIOS.id());
//		}
//	}

	@Check
	public void missingScenarioSteps(Scenario model) {
		if (model.getSteps().isEmpty()) {
			String title = (model.getTitle() == null) ? "" : model.getTitle().trim();
			error(MISSING_SCENARIO_STEPS.message(title), model, SCENARIO__STEPS, MISSING_SCENARIO_STEPS.id());
		}
	}

	@Check
	public void missingScenarioTitle(Scenario model) {
		if (model.getTitle() == null || model.getTitle().trim() == "") {
			warning(MISSING_SCENARIO_TITLE.message(), model, SCENARIO__TITLE, MISSING_SCENARIO_TITLE.id());
		}
	}
	
	@Check(CheckType.NORMAL)
	public void invalidStepdef(Step model) {
		List<StepdefMatch> matches = stepMatcher.findMatches(model.getKeyword(), model.getDescription());
		if (matches.size() == 0) {
			warning(MISSING_STEPDEF.message(model.getKeyword(), 
					model.getDescription()),
					STEP__DESCRIPTION, 
					MISSING_STEPDEF.id());
		}
		else if (matches.size() > 1) {
			warning(MULTIPLE_STEPDEF.message(model.getKeyword(), 
					model.getDescription()),
					STEP__DESCRIPTION, 
					MULTIPLE_STEPDEF.id());
		}
	}

}
